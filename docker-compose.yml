services:
  # ----------------------------------------------------
  # 1. アプリケーションコンテナ (PHP-FPM 8.4)
  # ----------------------------------------------------
  src:
    # ./infra/php/Dockerfile を使用してイメージをビルド
    build:
      context: .
      dockerfile: ./infra/php/Dockerfile
      # 適切なUID/GIDをビルド引数として渡す
      args:
        UID: 1000
        GID: 1000
    # 命名は任意 サービス名と混同しないように laravel_src などのほうが適切かも
    container_name: src
    # vite開発サーバーのポートをホストに公開する(HMR用)
    ports:
      - "5173:5173"
    # コンテナ内のデフォルト作業ディレクトリ
#    working_dir: /var/www/html/src
    working_dir: /var/www/src
    # ホストの現在のディレクトリ(Laravelプロジェクトルート)をコンテナ内の/var/www/html/srcにマウント
    volumes:
      # - ./src:/var/www/html/src
      - ./src:/var/www/src
    # Nginxと通信するために、同じネットワークに接続、命名は任意
    networks:
      - laravel_network
    depends_on:
      - db

  # ----------------------------------------------------
  # 2. WEBサーバーコンテナ(Nginx)
  # ----------------------------------------------------

  nginx:
    # 最新の安定版を読み込む
    image: nginx:stable-alpine
    # 命名は任意 サービス名と混同しないように laravel_src などのほうが適切かも
    container_name: nginx
    # ホストOSの8080をコンテナ内のポート80にマウント
    ports:
      - "8080:80"
    volumes:
      # srcのLaravelのコードをnginxにもマウント
        - .:/var/www/src
      # Nginxの設定ファイルをコンテナ内にバインドマウント
        - ./infra/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - laravel_network
    # PHP-FPMが起動してから起動する
    depends_on:
      - src

  # ----------------------------------------------------
  # 3. データベースコンテナ (MariaDB)
  # ----------------------------------------------------
  db:
    # MariaDBの最新安定版イメージを使用
    image: mariadb:latest
    # 命名は任意 サービス名と混同しないように laravel_src などのほうが適切かも
    container_name: db
    # 外部からアクセスするためのポートマウント
    ports:
      - "3306:3306"
    # .env で設定した環境変数を基にDBをセットアップ
    # ROOT_PASSWORDとPASSWORDはローカル開発環境で簡便化のため同じものを使う
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    # データを永続化するための名前付きボリューム
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - laravel_network

# ネットワーク定義
networks:
  laravel_network:
    driver: bridge

# ボリューム定義
# コンテナとは別にDocker管理領域内にdb_dataというストレージを確保させる
# コンテナの再起動でデータが削除されないようになる
volumes:
  db_data:
    driver: local